===== Class Sprite =====
==== Description ====
The Sprite class is a lua wrapper for LGCK's Sprite object.

It allows direct manipulation of the engine data through the member functions.

Directly modifying member variables in a lua object doesn't modify the engine object however. Please use the appropriate member functions for that.

This is a how to get an instance of the Sprite class in an event handlers.
<code lua>
local sprite = getSprite( self );
</code>
==== Members ====
  * **int** x\\
  * **int** y\\
  * **int** aim\\
  * **int** triggerFlag\\
  * **int** stateFlag\\
  * **int** actionMask\\
  * **int** imageSet\\
  * **int** imageNo\\
  * **int** objType\\
  * **int** id\\
  * **string** name\\
  * **int** class\\


==== Sprite:activate (lua/untested)====
  * __in__ ** void **\\
  * __out__ ** void **\\
=== Description ===

Activate this sprite.  Inactive sprite do not consume their handlers until they are activated. Activation can be automatic or manual via scripting using this function.

<code lua>
local sprite = getSprite(self);
if sprite:isVisible() then
  sprite:activeSprite();
end
</code>




==== Sprite:addItem (?)====
  * __in__ **int protoID**\\
  * __out__ ** void **\\




==== Sprite:attackPlayer====
  * __in__ ** void **\\
  * __out__ ** void **\\




==== Sprite:callEvent====
  * __in__ **int event**\\
  * __out__ ** void **\\
=== Description ===

Call an event handler for this sprite. 

<code lua>
local player = getPlayer();
player:callEvent( EO_DEATH );
</code>

For complete list of all available events see callObjEvent() for details.




==== Sprite:canFall====
  * __in__ ** void **\\
  * __out__ **bool **\\
=== Description ===

This function returns true if the sprite can fall. 

<code lua>
local s = getSprite( self );
local tmp = copySprite ( s );

local fall = 0;
while tmp:canFall() do
  tmp:move( DOWN );
  fall = fall + 1;
end

tmp:clear();

if fall < 20 then
  playSound("short fall.ogg");
else
  playSound("fall.ogg");
end

</code>




==== Sprite:canMove====
  * __in__ **int aim**\\
  * __out__ **bool **\\




==== Sprite:changeTo====
  * __in__ **int objType**\\
  * __out__ ** void **\\




==== Sprite:childCount====
  * __in__ ** void **\\
  * __out__ **int count**\\
=== Description ===

Count the number of children. Typically these are bullets.




==== Sprite:clear====
  * __in__ ** void **\\
  * __out__ ** void **\\
=== Description ===

<code lua>
local s = getSprite( self );
local tmp = copySprite ( s );
...
tmp:clear();
</code>




==== Sprite:copy====
  * __in__ ** void **\\
  * __out__ **Sprite **\\
=== Description ===

Create a copy of this sprite.




==== Sprite:frameCount (lua/?)====
  * __in__ ** void **\\
  * __out__ **int **\\
=== Description ===

Returns the frame count for the Sprite's active frame set.




==== Sprite:freeze====
  * __in__ ** void **\\
  * __out__ ** void **\\




==== Sprite:getExtra====
  * __in__ ** void **\\
  * __out__ **Extra **\\




==== Sprite:getHP (lua/?)====
  * __in__ ** void **\\
  * __out__ **int hp**\\
=== Description ===

get the sprite hit points




==== Sprite:getProto====
  * __in__ ** void **\\
  * __out__ **Proto **\\




==== Sprite:getString (lua/untested)====
  * __in__ ** void **\\
  * __out__ **string **\\
=== Description ===

Get the hint/description associated with a given sprite




==== Sprite:hasItem (?)====
  * __in__ **int protoID**\\
  * __out__ ** void **\\




==== Sprite:height (lua/untested)====
  * __in__ ** void **\\
  * __out__ **int height**\\
=== Description ===

Get sprite height (pixels).




==== Sprite:hide====
  * __in__ ** void **\\
  * __out__ ** void **\\
=== Description ===

Hide the sprite.
<code lua>
local player = getPlayer();
player:hide();
if player:isHidden() then
   Debug:printf("%s is hidden", player.name);
end 
</code>




==== Sprite:hitTest (lua/untested)====
  * __in__ **aim **\\
  * __out__ **HitTest **\\
=== Description ===

returns a hit test object.




==== Sprite:isActive (lua/untested)====
  * __in__ ** void **\\
  * __out__ **bool active**\\
=== Description ===

Get the sprite active state. This is set through the activation policy.




==== Sprite:isDead====
  * __in__ ** void **\\
  * __out__ ** void **\\
=== Description ===

returns true if the sprite is dead !

<code lua>
local player = getPlayer();
killPlayer();
if player:isDead() then
   Debug:printf("player is dead");
end
</code>




==== Sprite:isFrozen() (lua/?)====
  * __in__ ** void **\\
  * __out__ **bool **\\
=== Description ===

returns true if the sprite is frozen




==== Sprite:isGoal (lua/?)====
  * __in__ ** void **\\
  * __out__ **bool **\\
=== Description ===

returns true is the sprite is marked as a goal.




==== Sprite:isHidden====
  * __in__ ** void **\\
  * __out__ ** void **\\
=== Description ===

returns true if the sprite is hidden.

<code lua>
local player = getPlayer();
Debug:printf("player id= %d; name: %s", player.id, player.name);
player:hide();
if player:isHidden() then
   Debug:printf("%s is hidden", player.name);
end 
</code>




==== Sprite:isMonster (lua/untested)====
  * __in__ ** void **\\
  * __out__ **bool **\\




==== Sprite:IsPlayer (lua/untested)====
  * __in__ ** void **\\
  * __out__ **bool **\\
=== Description ===

Tests if this sprite is a player object.




==== Sprite:isPlayerThere====
  * __in__ **int aim**\\
  * __out__ **bool **\\




==== Sprite:isVisible====
  * __in__ ** void **\\
  * __out__ **bool **\\




==== Sprite:kill====
  * __in__ ** void **\\
  * __out__ ** void **\\
=== Description ===

Kills the sprite. Don't try this inside the sprite's own event handler!!!

<code lua>
local player = getPlayer();
player:kill();
if player:isDead() then
   Debug:printf("`%s` is dead", player.name);
end 
</code>




==== Sprite:land (lua/?)====
  * __in__ ** void **\\
  * __out__ ** void **\\
=== Description ===

Calls the default "landing" code for this sprite. This is typically used when an sprite has stopped from a free fall. land() checks if the sprite's maxFall property is exceeded and kills the sprite as appropriate.




==== Sprite:map====
  * __in__ ** void **\\
  * __out__ ** void **\\




==== Sprite:markAsGoal (lua/?)====
  * __in__ ** void **\\
  * __out__ ** void **\\




==== Sprite:move====
  * __in__ **int aim**\\
  * __out__ ** void **\\
=== Description ===

Move the sprite in a given direction; UP, DOWN, LEFT or RIGHT




==== Sprite:moveBy====
  * __in__ **int tx**\\
  * __in__ **int ty**\\
  * __out__ ** void **\\




==== Sprite:moveTo====
  * __in__ **int x**\\
  * __in__ **int y**\\
  * __out__ ** void **\\




==== Sprite:objClass====
  * __in__ ** void **\\
  * __out__ **int classId**\\




==== Sprite:objName====
  * __in__ ** void **\\
  * __out__ **string name of the object**\\




==== Sprite:objType====
  * __in__ ** void **\\
  * __out__ **int TypeId**\\




==== Sprite:proto====
  * __in__ ** void **\\
  * __out__ **Proto **\\
=== Description ===

same as getProto()




==== Sprite:removeItem (?)====
  * __in__ **int protoID**\\
  * __out__ ** void **\\




==== Sprite:resetInventory (?)====
  * __in__ ** void **\\
  * __out__ ** void **\\




==== Sprite:setAim====
  * __in__ **int aim**\\
  * __out__ ** void **\\




==== Sprite:setAsGoal (lua/untested)====
  * __in__ ** void **\\
  * __out__ ** void **\\




==== Sprite:setHP (lua/untested)====
  * __in__ **int hp**\\
  * __out__ ** void **\\
=== Description ===

set the sprite hit points




==== Sprite:setImage====
  * __in__ **int imageSet***\\
  * __in__ **int imageNo**\\
  * __out__ ** void **\\
=== Description ===

Change the image of the given sprite. 

<code lua>
local sprite = getSprite(self);
sprite:setImage(sprite.imageSet, XOR(sprite.imageNo,1));
</code>




==== Sprite:setOwner (lua/?)====
  * __in__ ** void **\\
  * __out__ **Sprite owner**\\
=== Description ===

Set the owner of this sprite




==== Sprite:setState====
  * __in__ **int stateFlag**\\
  * __in__ **bool flip***\\
  * __out__ **int stateFlag**\\
=== Description ===

Change the state flags for this sprite.

if flip is true the bits are set on otherwise they are cleared. Flip is optional and assumed to be true.

State flag is a combination of the following:

<code lua>
    STATE_FALL		
    STATE_DEAD	
    STATE_HIT		    
    STATE_JUMP	
    STATE_BEGINNING    
    STATE_FIRING       
    STATE_LOOKUP       
</code>

Example usage:

<code lua>
local player = getPlayer();
player:setState(STATE_DEAD);
</code>

returns the newly modified state flag.




==== Sprite:setTriggerKey====
  * __in__ **int key**\\
  * __out__ ** void **\\




==== Sprite:show====
  * __in__ ** void **\\
  * __out__ ** void **\\
=== Description ===

Show this sprite. This reverses the effect of Sprite:hide().

<code lua>
local player = getPlayer();
if player:isHidden() then
   Debug:printf("%s is hidden", player.name);
end 
player:show();
</code>




==== Sprite:spawn (lua/?)====
  * __in__ ** void **\\
  * __out__ ** void **\\




==== Sprite:stopAnimation====
  * __in__ ** void **\\
  * __out__ ** void **\\
=== Description ===

Stop the sprite's animation sequence. see stopAnimation() for details.

<code lua>
local sprite = getSprite( self );
sprite:stopAnimation();
</code>




==== Sprite:testFlags====
  * __in__ **int mask**\\
  * __out__ **bool result**\\




==== Sprite:togglePathPlayback (lua/?)====
  * __in__ **bool enable **\\
  * __out__ ** void **\\




==== Sprite:triggerHitState====
  * __in__ ** void **\\
  * __out__ ** void **\\
=== Description ===

Trigger the hit state for this sprite. See triggerHitState() for details.

<code lua>
local player = getPlayer();
player:triggerHitState();
</code>




==== Sprite:tryAnimation====
  * __in__ **int animSeq**\\
  * __out__ **bool **\\
=== Description ===

see tryAnimation() for details




==== Sprite:tryPath====
  * __in__ **int path**\\
  * __in__ **int aim***\\
  * __out__ **bool **\\
=== Description ===

Apply a defined path to a sprite. Path can be any PS_XXXX constants. See tryPath() for details.

<code lua>
local player = getPlayer();
player:tryPath(PS_JUMP_LEFT);
</code>




==== Sprite:unFreeze (lua/?)====
  * __in__ ** void **\\
  * __out__ ** void **\\




==== Sprite:unMap====
  * __in__ ** void **\\
  * __out__ ** void **\\




==== Sprite:unmarkAsGoal (?)====
  * __in__ ** void **\\
  * __out__ ** void **\\




==== Sprite:unsetAsGoal (?)====
  * __in__ ** void **\\
  * __out__ ** void **\\




==== Sprite:width (lua/untested)====
  * __in__ ** void **\\
  * __out__ **int width**\\
=== Description ===

Get sprite width in pixels.



